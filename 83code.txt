public ShopDTO update(long shopId, @NotNull ShopUpdateDTO updateDTO, long userId, @NotNull String remark, @NotNull UpdateSourceDTO source) throws ServiceException {
    PShopInfo oldInfo = shopInfoService.get(shopId);
    if (oldInfo == null) {
        throw MyExceptionFactory.instance(ErrorCode.INVALID_PARAMETERS, "店铺信息不存在");
    }

    updateDTO.setShopId(shopId);
    
    // shopInfoService.setForUpdate 是将OldShopInfo 和 updateDTO结合组装成最终更新到DB中的newShopInfo
    PShopInfo newInfo = shopInfoService.setForUpdate(shopId, oldInfo, shopInfoTransformer.transformShopInfoPO(updateDTO));

    // 事前校验
    ValidatorWrapper.of(shopInfoValidator).validates(userId, oldInfo, newInfo);

    // 事中更新
    newInfo = shopInfoService.createOrUpdate(shopId, oldInfo, newInfo);

    // 事后处理
    Publisher.subscribe(changeRecordSubscriber, shopInfoChangeMessageNoticeSubscriber, syncAggregateSubscriber)
        .publish(ShopInfoEvent.of(oldInfo, newInfo, userId, enumTransformer.transformUpdateSourcePO(source), remark));

    // 返回结果
    return shopInfoTransformer.transformShopInfoDTO(newInfo);
}