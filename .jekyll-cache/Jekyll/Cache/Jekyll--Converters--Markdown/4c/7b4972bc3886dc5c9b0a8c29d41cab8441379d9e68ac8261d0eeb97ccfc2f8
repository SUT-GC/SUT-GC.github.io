I"%t<ul class="toc" id="markdown-toc">
  <li><a href="#heading-1-语言" id="markdown-toc-heading-1-语言">1 语言</a>    <ul>
      <li><a href="#heading-11-类型" id="markdown-toc-heading-11-类型">1.1 类型</a>        <ul>
          <li><a href="#heading-111-变量" id="markdown-toc-heading-111-变量">1.1.1 变量</a></li>
          <li><a href="#heading-112-常量" id="markdown-toc-heading-112-常量">1.1.2 常量</a></li>
          <li><a href="#heading-113-枚举" id="markdown-toc-heading-113-枚举">1.1.3 枚举</a></li>
          <li><a href="#heading-114-基本类型" id="markdown-toc-heading-114-基本类型">1.1.4 基本类型</a></li>
          <li><a href="#heading-115-指针类型" id="markdown-toc-heading-115-指针类型">1.1.5 指针类型</a></li>
          <li><a href="#heading-116-自定义类型" id="markdown-toc-heading-116-自定义类型">1.1.6 自定义类型</a></li>
        </ul>
      </li>
      <li><a href="#heading-12-表达式" id="markdown-toc-heading-12-表达式">1.2 表达式</a>        <ul>
          <li><a href="#heading-121-运算符" id="markdown-toc-heading-121-运算符">1.2.1 运算符</a></li>
          <li><a href="#heading-122-初始化" id="markdown-toc-heading-122-初始化">1.2.2 初始化</a></li>
          <li><a href="#heading-123-控制流" id="markdown-toc-heading-123-控制流">1.2.3 控制流</a></li>
        </ul>
      </li>
      <li><a href="#heading-13-函数" id="markdown-toc-heading-13-函数">1.3 函数</a>        <ul>
          <li><a href="#heading-131-函数定义" id="markdown-toc-heading-131-函数定义">1.3.1 函数定义</a></li>
          <li><a href="#heading-132-可变参数" id="markdown-toc-heading-132-可变参数">1.3.2 可变参数</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="heading-1-语言">1 语言</h1>

<h2 id="heading-11-类型">1.1 类型</h2>

<h3 id="heading-111-变量">1.1.1 变量</h3>

<ul>
  <li>Go 是静态类型语 ，不能在运 期改变变量类型。</li>
  <li>var 定义变量，自动初始化为零值， 如果手动提供初始化，可以省略类型</li>
  <li>在函数内部用 := 定义变量更加方便</li>
  <li>未使用的局部变量将会报错</li>
  <li>统一代码块内对同名变量重新定义等于重新赋值，不同代码块对同名变量重新定义等于新建</li>
  <li>:= 必须产生新变量</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">a</span> <span class="kt">int</span>
    <span class="k">var</span> <span class="n">b</span> <span class="kt">float32</span> <span class="o">=</span> <span class="m">2.1</span>
    <span class="k">var</span> <span class="n">c</span> <span class="o">=</span> <span class="s">"hello"</span>
    <span class="n">d</span> <span class="o">:=</span> <span class="m">3</span>
    <span class="k">var</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span>
    <span class="k">var</span> <span class="p">(</span>
        <span class="n">h</span> <span class="kt">int</span> <span class="o">=</span> <span class="m">1</span>
        <span class="n">i</span> <span class="o">=</span> <span class="m">2.0</span>
    <span class="p">)</span>
    <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">:=</span> <span class="s">"world"</span><span class="p">,</span> <span class="m">3</span>
    <span class="n">_</span><span class="p">,</span> <span class="n">l</span> <span class="o">:=</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">l</span>

    <span class="n">m</span> <span class="o">:=</span> <span class="m">1</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="c">//0xc420070208, 1</span>
    <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">:=</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span>
    <span class="c">// m := 4 不允许，因为:=没有产生新的变量</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">n</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="c">//0xc420070208, 2</span>

    <span class="p">{</span>
        <span class="n">m</span> <span class="o">:=</span> <span class="m">3</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="c">//0xc420070220, 3</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="heading-112-常量">1.1.2 常量</h3>

<ul>
  <li>常量值必须是编译期可确定的数字、字符串、布尔值。</li>
  <li>不支持持 1UL、2LL 这样的类型后缀。</li>
  <li>在常量组中，不提供初始值，则默认与上一个值相同</li>
  <li>常量值可以是在编译器能确定内容的函数</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">const</span> <span class="p">(</span>
    <span class="n">a</span> <span class="o">=</span> <span class="m">1</span>
    <span class="n">b</span> <span class="o">=</span> <span class="no">true</span>
    <span class="n">c</span> <span class="o">=</span> <span class="s">"hello"</span>
    <span class="n">d</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="n">e</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="c">//1 true hello 5 5</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="heading-113-枚举">1.1.3 枚举</h3>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">Color</span> <span class="kt">int</span> <span class="c">//自定义类型</span>

<span class="k">const</span> <span class="p">(</span>
    <span class="c">// iota 自增值</span>
    <span class="n">Sunday</span> <span class="o">=</span> <span class="no">iota</span>
    <span class="n">Monday</span>
    <span class="n">Tuesday</span>
    <span class="n">Wednesday</span>
<span class="p">)</span>

<span class="k">const</span> <span class="p">(</span>
    <span class="n">_</span> <span class="o">=</span> <span class="no">iota</span>
    <span class="n">KB</span> <span class="o">=</span> <span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="m">10</span> <span class="o">*</span> <span class="no">iota</span><span class="p">)</span>
    <span class="n">MB</span> <span class="o">=</span> <span class="m">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="m">10</span> <span class="o">*</span> <span class="no">iota</span><span class="p">)</span>
<span class="p">)</span>

<span class="k">const</span> <span class="p">(</span>
    <span class="n">A</span><span class="p">,</span> <span class="n">B</span> <span class="o">=</span> <span class="no">iota</span><span class="p">,</span> <span class="m">10</span><span class="o">*</span><span class="no">iota</span>
    <span class="n">C</span><span class="p">,</span> <span class="n">D</span>
<span class="p">)</span>

<span class="k">const</span> <span class="p">(</span>
    <span class="n">Red</span> <span class="n">Color</span> <span class="o">=</span> <span class="no">iota</span>
    <span class="n">Blue</span>
<span class="p">)</span>

<span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="m">2</span> <span class="c">//未使用的全局变量不会出错</span>

<span class="k">func</span> <span class="n">test</span> <span class="p">(</span><span class="n">c</span> <span class="n">Color</span><span class="p">)</span> <span class="p">{}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">Sunday</span><span class="p">,</span> <span class="n">Monday</span><span class="p">,</span> <span class="n">Tuesday</span><span class="p">)</span> <span class="c">//0 1 2</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">KB</span><span class="p">,</span> <span class="n">MB</span><span class="p">,</span> <span class="n">A</span><span class="p">,</span> <span class="n">B</span><span class="p">,</span> <span class="n">C</span><span class="p">,</span> <span class="n">D</span><span class="p">)</span> <span class="c">//1024 1048576 0 0 1 10</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">Red</span><span class="p">,</span> <span class="n">Blue</span><span class="p">)</span> <span class="c">//0 1</span>

    <span class="n">c1</span> <span class="o">:=</span> <span class="n">Red</span>
    <span class="n">c2</span> <span class="o">:=</span> <span class="m">1</span>

    <span class="n">test</span><span class="p">(</span><span class="n">c1</span><span class="p">)</span>
<span class="c">//    test(c2) // 出错， int 与 Color 不是一个类型</span>
    <span class="n">_</span> <span class="o">=</span> <span class="n">c2</span>
    <span class="n">test</span><span class="p">(</span><span class="m">1</span><span class="p">)</span> <span class="c">// 自动转换成Red</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="heading-114-基本类型">1.1.4 基本类型</h3>

<ul>
  <li>空指针nil，不是NULL</li>
  <li>值类型 bool, byte, rune, int, uint, int8, uint8, int16, uint16, int32, uint32, int64, uint64, float32, float64, complex64, complext128, uintptr, array, struct, string</li>
  <li>引用类型 slice, map, channel, interface, function</li>
  <li>new([]int) 计算类型大小，分配零值，返回指针； make([]int) 分配内存，创建数据结构，返回对象</li>
  <li>不支持隐式类型转换</li>
  <li>不可以用其他值代表bool</li>
  <li>字符串 可以 s[i] 访问内部元素， 不可以对内部元素进行赋值s[i] = 1, 不可以访问内部元素的指针 &amp;s[i], 支持` 和" 两种定义形式， 链接跨行字符串<code class="language-plaintext highlighter-rouge">+</code>必须放在上一行末尾，修改字符串肯定会重新分配内存，</li>
</ul>

<p><img src="http://7xoguv.com1.z0.glb.clouddn.com/GO%20%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.png" alt="侵删" /></p>

<h3 id="heading-115-指针类型">1.1.5 指针类型</h3>

<ul>
  <li>默认nil，没有NULL常量</li>
  <li>操作符 <code class="language-plaintext highlighter-rouge">&amp;</code> 取变量地址，* 操作符通过指针访问目标对象</li>
  <li>不支持指针运算，不支持 <code class="language-plaintext highlighter-rouge">-&gt;</code> 操作符， 可以直接<code class="language-plaintext highlighter-rouge">.</code> 访问对象</li>
</ul>

<h3 id="heading-116-自定义类型">1.1.6 自定义类型</h3>

<p>可以将类型分为命名类型和未命名类型， 命名类型包括bool, int, string, 等， 未命名类型包括array, map, slice等</p>

<p>具有相同声明的未命名类型被视为同一类：</p>
<ul>
  <li>具有相同基本类型的指针</li>
  <li>具有相同元素和长度的array</li>
  <li>具有相同key-value的map</li>
  <li>具有相同元素类型的slice</li>
  <li>具有相同元素类型和方向的channel</li>
  <li>具有相同字段序列的匿名struct</li>
  <li>签名相同的fuction（不包括参数名）</li>
  <li>方法集相同的interface</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">type</code>关键字可以在局部或者全局定义类型，新定义的类型并不是被定义类型的别名， 除非目标是非命名类型，否则必须显示转换</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span> <span class="n">bigint</span> <span class="kt">int64</span>

<span class="k">var</span> <span class="n">a</span> <span class="n">bigint</span> <span class="o">=</span> <span class="m">2</span>
<span class="k">var</span> <span class="n">b</span> <span class="kt">int64</span> <span class="o">=</span> <span class="m">3</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">bigint</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="heading-12-表达式">1.2 表达式</h2>

<h3 id="heading-121-运算符">1.2.1 运算符</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code> 是语句而非表达式</li>
  <li>没有<code class="language-plaintext highlighter-rouge">~</code>， 可以用<code class="language-plaintext highlighter-rouge">^</code> 取反</li>
</ul>

<h3 id="heading-122-初始化">1.2.2 初始化</h3>

<ul>
  <li>初始化复合对象，必须使用类型标签，且做大括号必须在类型的尾部 <code class="language-plaintext highlighter-rouge">var a = []int {1,2,3}</code> `var a = struct { v1 int } {10}</li>
  <li>初始化值可以用<code class="language-plaintext highlighter-rouge">,</code>分割，但是最后一行必须以<code class="language-plaintext highlighter-rouge">,</code>或者<code class="language-plaintext highlighter-rouge">}</code>结尾</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
                <span class="m">1</span><span class="p">,</span>
                <span class="m">2</span><span class="p">,</span>
                <span class="m">3</span><span class="p">,</span>
              <span class="p">}</span>

<span class="k">var</span> <span class="n">b</span> <span class="o">=</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
                <span class="m">1</span><span class="p">,</span>
                <span class="m">2</span><span class="p">,</span>
                <span class="m">3</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="heading-123-控制流">1.2.3 控制流</h3>

<p><strong>if</strong></p>

<ul>
  <li>可以省略条件表达式的括号</li>
  <li>支持初始化语句，可定义局部变量</li>
  <li><code class="language-plaintext highlighter-rouge">{</code> 必须放在条件表达式右面</li>
  <li>不支持三元操作符</li>
</ul>

<p><strong>for</strong></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
    <span class="c">// do</span>
<span class="p">}</span>

<span class="n">i</span> <span class="o">:=</span> <span class="m">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">10</span> <span class="p">{</span>
    <span class="c">// do</span>
    <span class="n">i</span><span class="o">++</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">{</span>
    <span class="c">//dp</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>range</strong></p>

<p>迭代操作，返回 （索引，值） 或 （键，值）</p>

<ul>
  <li>range 会复制 对象的值</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span><span class="m">1</span><span class="p">,</span><span class="m">2</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">4</span><span class="p">}</span>
    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="m">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="o">:=</span>  <span class="k">range</span> <span class="n">a</span> <span class="p">{</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">/*
1 0xc42000e140 0xc42000a2a0
2 0xc42000e140 0xc42000a2a8
3 0xc42000e140 0xc42000a2b0
4 0xc42000e140 0xc42000a2b8
*/</span>
</code></pre></div></div>

<p><strong>switch</strong></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">}</span>
<span class="n">i</span> <span class="o">:=</span> <span class="m">2</span>
<span class="k">switch</span> <span class="n">i</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">x</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">:</span>
        <span class="nb">println</span><span class="p">(</span><span class="s">"a"</span><span class="p">)</span>
    <span class="k">case</span> <span class="m">1</span><span class="p">,</span> <span class="m">3</span><span class="o">:</span>
        <span class="nb">println</span><span class="p">(</span><span class="s">"b"</span><span class="p">)</span>
        <span class="k">break</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="nb">println</span><span class="p">(</span><span class="s">"c"</span><span class="p">)</span>
<span class="p">}</span>

<span class="c">// a 为什么呢？ 因为只会运行一个case，默认省略了break</span>
</code></pre></div></div>

<p><strong>goto break continue</strong></p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">main</span><span class="p">(){</span>
<span class="n">FOR1</span><span class="o">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="m">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">{</span>
<span class="n">FOR2</span><span class="o">:</span>
        <span class="k">for</span> <span class="n">j</span> <span class="o">:=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="m">100</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="m">10</span> <span class="p">{</span>
                <span class="k">break</span> <span class="n">FOR2</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="m">20</span> <span class="p">{</span>
                <span class="k">continue</span> <span class="n">FOR1</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="m">30</span> <span class="p">{</span>
                <span class="k">goto</span> <span class="n">EXIT</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">EXIT</span><span class="o">:</span>
        <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"exit"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="heading-13-函数">1.3 函数</h2>

<h3 id="heading-131-函数定义">1.3.1 函数定义</h3>

<ul>
  <li>不支持重载，默认参数，嵌套</li>
  <li>支持不定长参数，支持多返回，支持命名返回参数，支持匿名和闭包</li>
  <li><code class="language-plaintext highlighter-rouge">{</code> 依旧不能另起一行</li>
</ul>

<h3 id="heading-132-可变参数">1.3.2 可变参数</h3>

<ul>
  <li>可变参数本质是slice, 只能有一个且只能为最后一个</li>
  <li>使用slice对象做变参的时候，必须展开</li>
  <li>defer 延迟调用</li>
</ul>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>

<span class="k">import</span> <span class="p">(</span>
    <span class="s">"fmt"</span>
<span class="p">)</span>

<span class="k">type</span> <span class="n">MyFunc</span> <span class="k">func</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span>

<span class="k">func</span> <span class="n">test1</span> <span class="p">(</span><span class="n">mf</span> <span class="n">MyFunc</span><span class="p">,</span> <span class="n">a</span> <span class="kt">int</span><span class="p">,</span> <span class="n">b</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="n">c</span> <span class="kt">int</span><span class="p">){</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">mf</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">test2</span> <span class="p">(</span><span class="n">mf</span> <span class="k">func</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="kt">int</span><span class="p">,</span> <span class="n">a</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">mf</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">(){</span>
    <span class="n">a</span> <span class="o">:=</span> <span class="k">func</span><span class="p">(</span><span class="n">a</span> <span class="kt">int</span><span class="p">,</span> <span class="n">b</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">test1</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="s">"hello"</span><span class="p">))</span>

    <span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="n">test2</span><span class="p">(</span><span class="k">func</span><span class="p">(</span><span class="n">a</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span> <span class="n">a</span><span class="o">++</span> <span class="p">;</span> <span class="k">return</span> <span class="n">a</span><span class="p">},</span> <span class="m">1</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">func</span> <span class="n">test</span><span class="p">(</span><span class="n">s</span> <span class="kt">string</span><span class="p">,</span> <span class="n">n</span> <span class="o">...</span><span class="kt">int</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">var</span> <span class="n">x</span> <span class="kt">int</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="n">n</span> <span class="p">{</span>
        <span class="n">x</span> <span class="o">+=</span> <span class="n">i</span>
<span class="p">}</span>
    <span class="k">return</span> <span class="n">fmt</span><span class="o">.</span><span class="n">Sprintf</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">s</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">}</span>
    <span class="nb">println</span><span class="p">(</span><span class="n">test</span><span class="p">(</span><span class="s">"sum: %d"</span><span class="p">,</span> <span class="n">s</span><span class="o">...</span><span class="p">))</span>
<span class="p">}</span>
</code></pre></div></div>

:ET