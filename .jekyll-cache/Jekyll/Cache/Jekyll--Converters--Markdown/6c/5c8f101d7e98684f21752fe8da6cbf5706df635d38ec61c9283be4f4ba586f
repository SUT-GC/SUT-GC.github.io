I"N_<ul class="toc" id="markdown-toc">
  <li><a href="#heading-剑指offer笔记java实现" id="markdown-toc-heading-剑指offer笔记java实现">剑指offer笔记（JAVA实现）</a>    <ul>
      <li><a href="#heading-1--面试流程" id="markdown-toc-heading-1--面试流程">1  面试流程</a>        <ul>
          <li><a href="#heading-11-star法则" id="markdown-toc-heading-11-star法则">1.1 star法则</a></li>
          <li><a href="#heading-12-面试官喜欢针对项目问的问题" id="markdown-toc-heading-12-面试官喜欢针对项目问的问题">1.2 面试官喜欢针对项目问的问题</a></li>
          <li><a href="#heading-13-面试题" id="markdown-toc-heading-13-面试题">1.3 面试题</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="heading-剑指offer笔记java实现">剑指offer笔记（JAVA实现）</h1>

<h2 id="heading-1--面试流程">1  面试流程</h2>

<h3 id="heading-11-star法则">1.1 star法则</h3>

<ul>
  <li>S: 简单的项目背景，比如项目的规模，开发软件的功能和目标用户</li>
  <li>T: 自己完成的任务，了解好“参与”与“负责”</li>
  <li>A: 为了完成任务，自己做了哪些工作，是怎么做的。可以介绍特点，平台，技术。</li>
  <li>R: 写自己的贡献，比如完成任务的多少，时长，修改了多少bug，做了什么优化。</li>
</ul>

<h3 id="heading-12-面试官喜欢针对项目问的问题">1.2 面试官喜欢针对项目问的问题</h3>

<ul>
  <li>你在项目中遇到的最大的问题是什么，你是怎么解决的</li>
  <li>在这个项目中，你学到了什么。</li>
  <li>什么时候会和其他成员有什么冲突，你是怎么解决的。</li>
</ul>

<h3 id="heading-13-面试题">1.3 面试题</h3>

<h4 id="heading-131-找出一个链表的倒数第k个数">1.3.1 找出一个链表的倒数第k个数</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Chapter1</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nc">Node</span> <span class="n">next</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValue</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getValue</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TheKNumInLast</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Node</span> <span class="nf">createList</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">num</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="nc">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">();</span>
        <span class="c1">//切记，只有指针指向对内存才能存在说 head与now同时指向一个内存</span>
        <span class="c1">//如果head = null； now = head；now = new Node()</span>
        <span class="c1">//这样head与now并不能指向同一块内存，head还是=null</span>
        <span class="nc">Node</span> <span class="n">now</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">num</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">now</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="n">now</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">();</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">now</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">now</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">printList</span><span class="o">(</span><span class="nc">Node</span> <span class="n">head</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"this list is empty !"</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
            <span class="n">count</span> <span class="o">++;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="k">if</span><span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">next</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="n">head</span> <span class="o">=</span> <span class="n">head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">findK</span><span class="o">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">head</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span><span class="o">{</span>
        <span class="kt">int</span> <span class="n">kValue</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="o">(</span><span class="s">"传入的链表不能为空"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span><span class="o">(</span><span class="n">printList</span><span class="o">(</span><span class="n">head</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">Exception</span><span class="o">(</span><span class="s">"传入的链表长度不足K"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">Node</span> <span class="n">pre</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">aft</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">aft</span> <span class="o">=</span> <span class="n">aft</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">while</span><span class="o">(</span><span class="n">aft</span><span class="o">.</span><span class="na">next</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">aft</span> <span class="o">=</span> <span class="n">aft</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">kValue</span> <span class="o">=</span> <span class="n">pre</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">kValue</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="n">createList</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">printList</span><span class="o">(</span><span class="n">head</span><span class="o">));</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"the last k max = "</span><span class="o">+</span><span class="n">findK</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="n">head</span><span class="o">));</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>

</code></pre></div></div>

<h4 id="heading-132-四种实现singleton模式">1.3.2 四种实现singleton模式</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//懒汉模式</span>
<span class="kd">class</span> <span class="nc">SingletonL</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">SingletonL</span> <span class="n">a</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">SingletonL</span> <span class="nf">getSingletonL</span><span class="o">(){</span>
        <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SingletonL</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//恶汉模式</span>
<span class="kd">class</span> <span class="nc">SingletonE</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">SingletonE</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SingletonE</span><span class="o">();</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">SingletonE</span> <span class="nf">getSingletonE</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//双重检查模式</span>
<span class="kd">class</span> <span class="nc">SingletonS</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">SingletonS</span> <span class="n">a</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">SingletonS</span> <span class="nf">getSingletonS</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="kd">synchronized</span><span class="o">(</span><span class="nc">SingletonE</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
                    <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SingletonS</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">//使用内部类</span>
<span class="kd">class</span> <span class="nc">SingletonN</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Neibu</span><span class="o">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="nc">SingletonN</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SingletonN</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">SingletonN</span> <span class="nf">getSingletonN</span><span class="o">(){</span>
        <span class="k">return</span> <span class="nc">Neibu</span><span class="o">.</span><span class="na">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h4 id="heading-133-在二维有序数组里查找">1.3.3 在二维有序数组里查找</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span> <span class="mi">1</span> <span class="mi">2</span> <span class="mi">8</span> <span class="mi">9</span>     <span class="o">|</span>
<span class="o">|</span> <span class="mi">2</span> <span class="mi">4</span> <span class="mi">9</span> <span class="mi">12</span>    <span class="o">|</span>
<span class="o">|</span> <span class="mi">4</span> <span class="mi">7</span> <span class="mi">10</span> <span class="mi">13</span>   <span class="o">|</span>
<span class="o">|</span> <span class="mi">6</span> <span class="mi">8</span> <span class="mi">11</span> <span class="mi">15</span>   <span class="o">|</span>
<span class="o">|</span> <span class="mi">12</span> <span class="mi">17</span> <span class="mi">19</span> <span class="mi">20</span> <span class="o">|</span>

<span class="n">在其中查找</span> <span class="mi">7</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">Chapter2</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FindNumIn2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">findNum</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">key</span><span class="o">){</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">pos</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,-</span><span class="mi">1</span><span class="o">};</span>
        <span class="k">if</span><span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">){</span>
            <span class="k">return</span> <span class="n">pos</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">lie</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">hang</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">hang</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span><span class="o">(;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">lie</span><span class="o">;</span> <span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&lt;</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span>
                <span class="n">i</span><span class="o">--;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">&gt;</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span>
                <span class="n">j</span><span class="o">++;</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">==</span> <span class="n">a</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">i</span><span class="o">]){</span>
                <span class="n">pos</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="n">pos</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">return</span> <span class="n">pos</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">a</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">12</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">4</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">13</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">6</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span><span class="mi">15</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">12</span><span class="o">,</span><span class="mi">17</span><span class="o">,</span><span class="mi">19</span><span class="o">,</span><span class="mi">20</span><span class="o">}</span>
        <span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">findNum</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"("</span><span class="o">+</span><span class="n">pos</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="s">" , "</span><span class="o">+</span><span class="n">pos</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="s">")"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<blockquote>
  <p>博客迁移自 <a href="http://blog.csdn.net/GC_chao/article/details/52224481">GC-CSDN</a></p>
</blockquote>
:ET