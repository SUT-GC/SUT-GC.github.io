I"y|<ul class="toc" id="markdown-toc">
  <li><a href="#heading-由文档自动化引发的技术思考" id="markdown-toc-heading-由文档自动化引发的技术思考">由文档自动化引发的技术思考</a>    <ul>
      <li><a href="#heading-为什么需要接口文档" id="markdown-toc-heading-为什么需要接口文档">为什么需要接口文档</a></li>
      <li><a href="#heading-现状和问题" id="markdown-toc-heading-现状和问题">现状和问题</a></li>
      <li><a href="#heading-常用的解决方案" id="markdown-toc-heading-常用的解决方案">常用的解决方案</a></li>
      <li><a href="#heading-maven如何生成javadoc" id="markdown-toc-heading-maven如何生成javadoc">maven如何生成javadoc</a></li>
      <li><a href="#heading-如何让文档自动化生成" id="markdown-toc-heading-如何让文档自动化生成">如何让文档自动化生成</a></li>
      <li><a href="#heading-这就完事了么" id="markdown-toc-heading-这就完事了么">这就完事了么？</a></li>
    </ul>
  </li>
</ul>

<h1 id="heading-由文档自动化引发的技术思考">由文档自动化引发的技术思考</h1>

<h2 id="heading-为什么需要接口文档">为什么需要接口文档</h2>

<p>在我们日常工作中，正常的公司工种一般都会有后端、h5端、ios客户端、android客户端这几大类研发工程师，身为一个后端研发，经常会跟其他领域（服务负责人）的后端研发，各种前端研发打交道，而这“交道”之一便是介绍自己领域的对外能力，让其他领域或者工种的人能够了解和使用我们自己所负责的这个领域，那这种介绍的手段之一便是接口文档。</p>

<p>那针对于接口文档来说，会发生如下几个action：</p>
<ul>
  <li>写文档</li>
  <li>传递文档</li>
  <li>读文档</li>
</ul>

<p>这里，写文档尤其重要，也是耗时最多的一个点</p>
<h2 id="heading-现状和问题">现状和问题</h2>

<p>那我们现在是用什么来写文档呢？</p>

<p>Wiki</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc1.png" alt="wiki" /></p>

<p>Yapi</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/c1cddoc2.png" alt="Yapi" /></p>

<p>着两种文档综合起来，存在着几种问题：</p>

<ul>
  <li>格式要手写 – 效率低，不美观， 不统一</li>
  <li>复制粘贴程度高 – 基本就是将代码里面的东西粘贴出来</li>
  <li>实时性低 – 比如我由于一些功能迭代，导致接口增加了一些参数，但是有些人可能忘记更新文档，有些人可能根本不知道存在文档，导致文档更新不及时</li>
</ul>

<h2 id="heading-常用的解决方案">常用的解决方案</h2>

<p>好，那有没有什么解决办法呢？</p>

<p>其实接口文档有着自己固有的一些解决方案，特别是依托于java生态的强大。</p>

<p>前端和后端的接口文档比较出名的工具叫Swagger，维基百科是这么介绍的：<em>Swagger 是一款RESTFUL接口的、基于YAML、JSON语言的文档在线自动生成、代码自动生成的工具。</em> 会java的同学看一眼下面的图，基本就知道怎么回事了。</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc3.jpg" alt="swagger" /></p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc4.jpg" alt="swagger" /></p>

<p>后端和后端的接口文档可以用现成的Javadoc</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/c1cddoc5.jpg" alt="swagger" /></p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc6.jpg" alt="swagger" /></p>

<p>无论是javadoc还是swagger生成的方式都是在写代码的时候以注解的方式或者注释的方式写在代码上，然后使用命令，将文档生成出来，接下来主要是介绍javadoc，swagger也是大同小异。</p>

<h2 id="heading-maven如何生成javadoc">maven如何生成javadoc</h2>

<ul>
  <li>修改API目录下的pom文件，添加javadoc插件</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="o">&lt;</span><span class="n">plugin</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">maven</span><span class="o">.</span><span class="na">plugins</span><span class="o">&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">maven</span><span class="o">-</span><span class="n">javadoc</span><span class="o">-</span><span class="n">plugin</span><span class="o">&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">2.10</span><span class="o">.</span><span class="mi">4</span><span class="o">&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">configuration</span><span class="o">&gt;</span>
	    <span class="o">&lt;</span><span class="n">charset</span><span class="o">&gt;</span><span class="no">UTF</span><span class="o">-</span><span class="mi">8</span><span class="o">&lt;/</span><span class="n">charset</span><span class="o">&gt;</span>
	    <span class="o">&lt;</span><span class="n">additionalparam</span><span class="o">&gt;-</span><span class="nl">Xdoclint:</span><span class="n">none</span><span class="o">&lt;/</span><span class="n">additionalparam</span><span class="o">&gt;</span>
	<span class="o">&lt;/</span><span class="n">configuration</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">plugin</span><span class="o">&gt;</span>

</code></pre></div></div>

<ul>
  <li>在API目录下执行maven命令</li>
</ul>

<pre><code class="language-maven">mvn clean javadoc:javadoc
</code></pre>

<ul>
  <li>在target目录下查看文档</li>
</ul>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open ./target/site/apidocs/index.html
</code></pre></div></div>

<blockquote>
  <p>javadoc 生成就是各种html文件，串联起来之后便成了一个方便阅读的网站，可以把这个网站放在静态资源服务器上方便传阅</p>
</blockquote>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc8.png" alt="javadoc" /></p>

<p>还记不记得上面提到的三个问题：格式要手写，复制粘贴程度高，实时性低。 maven带javadoc已经解决了前两个问题了，那第三个问题“实时性”低怎么解决呢？我们接下来讨论下。</p>

<h2 id="heading-如何让文档自动化生成">如何让文档自动化生成</h2>

<p>我们先讨论下什么叫实时性？我所能理解的文档生成实时性无非就是每次代码变更都会重新生成文档，仅此。那为题是什么时候算代码变更呢？ 如果用git的话，我人文，一次code git push，才算是一次代码变更，也就是说我们期望，每次git push 的时候都重新生成javadoc展示给用户， 这样应该是一个理想的状态。</p>

<p>我们要做的事情无非就是下面的图：</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc9.jpg" alt="gitlab" /></p>

<p>看着这张图，整个流程就是 用户gitpush代码到gitlab服务器的时候，会有个东西能够告诉文档服务器，文档服务器获取最新的代码，然后生成javadoc，再部署到资源服务上，之后展示文档给用户。整个流程中，gitpush是能实现的，文档服务器展示静态资源是能实现的（nginx），那么其中一环就是gitlab如何同志文档服务器并且文档服务器如何获取gitlab的代码并下载执行javadoc生成</p>

<p>其实现有两个解决方案可以帮助我们解决问题：</p>
<ul>
  <li>gitlab-runner</li>
  <li>jenkins</li>
</ul>

<p>由于gitlab-runner是gitlab天然就支持的功能，所以，我们选择gitlab-runner来做这件事情</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc10.jpg" alt="gitlab" /></p>

<p>我们这里简单说下gitlab-runner是什么？ gitlab-runner其实就是一个进程程序，可以安装在任何linux服务器上，运行的时候可以将自己和gitlab服务区联合（前提必须是网络互通），每次gitlab更新代码的时候，gitlab都会根据runner注册的时候所带的tag来告诉指定的runner，runner会将代码从gitlab下载下来，并且执行代码文件里面的<code class="language-plaintext highlighter-rouge">.gitlab-ci.yml</code> 大体的流程如下：</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc11.jpg" alt="gitlab" /></p>

<p>这是项目所写的gitlab-ci.yml 内容:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stages:
  - build


genJavaDoc:
  stage: build
  script:
    - "ls -al"
    - "export APPID=pay-trader" # appid_xx 唯一标示 可以修改成自己的
    - "export API_PATH=casher-trader-api" # api_modle api模块的路径 根据自己项目填写
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # 下面的代码不需要变更
    # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    - "export ROOT_FOLDER=/data/javadoc" #文档服务器放置javadoc的目录
    - "export PROJECT_FOLDER=$ROOT_FOLDER/$APPID" # 项目目录
    - "export CURRENT_GIT_BRANCH=$CI_BUILD_REF_NAME" # 当前分支
    - "export TARGET_DOC_FOLDER=$PROJECT_FOLDER/${CURRENT_GIT_BRANCH//\\//-}" # 文档目录 我把分支中的/替换成了-
    - "cd $API_PATH" # 进入api模块的路径
    - "mvn clean javadoc:javadoc" # maven 生成javadoc
    - "mkdir -p $TARGET_DOC_FOLDER" # 创建目录文件
    - "rm -rf $TARGET_DOC_FOLDER/*" # 如果存在目录文件，则将其内容删除
    - "mv ./target/site/apidocs/* $TARGET_DOC_FOLDER" # 把生成出来的文档移动到对应的文档目录
    - "cd $ROOT_FOLDER" # 进入项目根目录
    - "python replace_template.py" # 运行这个python脚本
  tags:
    - javadoc
</code></pre></div></div>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc12.jpg" alt="gitlab" /></p>

<p>nginx配置如下：</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc13.jpg" alt="gitlab" /></p>

<p>打开<code class="language-plaintext highlighter-rouge">localhost:8091</code>看到的页面如下：</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc14.jpg" alt="gitlab" /></p>

<p>这个页面有点丑，我们可以在<code class="language-plaintext highlighter-rouge">/data/javadoc</code>下增加<code class="language-plaintext highlighter-rouge">index.html</code>来美化界面，但是有个小问题，如何将本地目录文件内容放在自己写的<code class="language-plaintext highlighter-rouge">index.html</code>里面展示出来呢？ 我这里用了一个简单的办法，就是手写了个python脚本，负责获取本地目录并且根据本地目录生成<code class="language-plaintext highlighter-rouge">index.html</code></p>

<p><code class="language-plaintext highlighter-rouge">replace_template.py</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#! -*- coding:utf8 -*-
</span><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">json</span>

<span class="nb">reload</span><span class="p">(</span><span class="n">sys</span><span class="p">)</span>
<span class="n">sys</span><span class="p">.</span><span class="n">setdefaultencoding</span><span class="p">(</span><span class="s">"utf-8"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">file_dir</span><span class="p">):</span>
    <span class="n">index_template_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"index.html.template"</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span>
    <span class="n">index_file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"index.html"</span><span class="p">,</span> <span class="s">"w+"</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">'relace:'</span><span class="p">,</span> <span class="n">file_dir</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">index_template_file</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span> <span class="ow">or</span> <span class="nb">len</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">"GC_JAVA_DOC_FILE_DIR"</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">file_dir</span><span class="p">))</span>
        <span class="n">index_file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>

    <span class="n">index_file</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">root_path</span><span class="p">):</span>
    <span class="s">'''
        build dir struct
    '''</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">file_names</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">root_path</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">file_name</span> <span class="ow">in</span> <span class="n">file_names</span><span class="p">:</span>
        <span class="n">file_path</span> <span class="o">=</span> <span class="n">root_path</span> <span class="o">+</span> <span class="s">'/'</span> <span class="o">+</span> <span class="n">file_name</span>
        <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isdir</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
            <span class="n">one_info</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">one_info</span><span class="p">[</span><span class="s">'appid'</span><span class="p">]</span> <span class="o">=</span> <span class="n">file_name</span>
            <span class="n">one_info</span><span class="p">[</span><span class="s">'branch'</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">child_file_names</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">child_file_name</span> <span class="ow">in</span> <span class="n">child_file_names</span><span class="p">:</span>
                <span class="n">one_info</span><span class="p">[</span><span class="s">'branch'</span><span class="p">].</span><span class="n">append</span><span class="p">({</span><span class="s">"name"</span><span class="p">:</span> <span class="n">child_file_name</span><span class="p">})</span>

            <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">one_info</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">result</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">file_dir</span> <span class="o">=</span> <span class="n">list_dir</span><span class="p">(</span><span class="s">'.'</span><span class="p">)</span>
    <span class="n">replace</span><span class="p">(</span><span class="n">file_dir</span><span class="p">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">index.html.template</code></p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html&gt;</span>
    <span class="nt">&lt;head&gt;</span>
        <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
        <span class="c">&lt;!-- import CSS --&gt;</span>
        <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/head&gt;</span>
    <span class="nt">&lt;body&gt;</span>
        <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"app"</span><span class="nt">&gt;</span>
            <span class="nt">&lt;el-container&gt;</span>
                <span class="nt">&lt;el-header</span> <span class="na">class=</span><span class="s">"doc-header"</span> <span class="na">height=</span><span class="s">"50px"</span><span class="nt">&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"header-desc"</span><span class="nt">&gt;</span>
            JavaDoc自动化部署，有问题找GC，接入姿势请看wiki：<span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"xxxxx"</span><span class="nt">&gt;</span>xxxxx<span class="nt">&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/el-header&gt;</span>
                <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"spilt-line"</span><span class="nt">&gt;&lt;/div&gt;</span>
                <span class="nt">&lt;el-container&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"appid"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;el-aside</span> <span class="na">width=</span><span class="s">"300px"</span><span class="nt">&gt;</span>
                            <span class="nt">&lt;el-menu</span> <span class="na">:default-active=</span><span class="s">"activityIndex"</span> <span class="na">class=</span><span class="s">"el-menu-vertical-demo"</span> <span class="na">v-for=</span><span class="s">"(item, index) in file_dir"</span> <span class="err">@</span><span class="na">select=</span><span class="s">"handleSelect"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;el-menu-item</span> <span class="na">:index=</span><span class="s">"index+''"</span><span class="nt">&gt;</span>
                                    <span class="nt">&lt;i</span> <span class="na">class=</span><span class="s">"el-icon-menu"</span><span class="nt">&gt;&lt;/i&gt;</span>
                                    <span class="nt">&lt;span</span> <span class="na">slot=</span><span class="s">"title"</span><span class="nt">&gt;&lt;/span&gt;</span>
                                <span class="nt">&lt;/el-menu-item&gt;</span>
                            <span class="nt">&lt;/el-menu&gt;</span>
                        <span class="nt">&lt;/el-aside&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                    <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"appid_branch"</span><span class="nt">&gt;</span>
                        <span class="nt">&lt;el-main&gt;</span>
                            <span class="nt">&lt;el-table</span> <span class="na">:data=</span><span class="s">"activity_appid_branch_info"</span> <span class="na">style=</span><span class="s">"width: 100%"</span><span class="nt">&gt;</span>
                                <span class="nt">&lt;el-table-column</span> <span class="na">label=</span><span class="s">"分支"</span> <span class="nt">&gt;</span>
                                    <span class="nt">&lt;template</span> <span class="na">class=</span><span class="s">"branc_name"</span> <span class="na">slot-scope=</span><span class="s">"scope"</span><span class="nt">&gt;</span>
                                        <span class="nt">&lt;a</span> <span class="na">:href=</span><span class="s">"activity_appid_info+'/'+scope.row.name"</span><span class="nt">&gt;&lt;/a&gt;</span>
                                    <span class="nt">&lt;/template&gt;</span>
                                <span class="nt">&lt;/el-table-column&gt;</span>
                            <span class="nt">&lt;/el-table&gt;</span>
                        <span class="nt">&lt;/el-main&gt;</span>
                    <span class="nt">&lt;/div&gt;</span>
                <span class="nt">&lt;/el-container&gt;</span>
            <span class="nt">&lt;/el-container&gt;</span>
        <span class="nt">&lt;/div&gt;</span>
    <span class="nt">&lt;/body&gt;</span>
    <span class="c">&lt;!-- import Vue before Element --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://unpkg.com/vue/dist/vue.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="c">&lt;!-- import JavaScript --&gt;</span>
    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"https://unpkg.com/element-ui/lib/index.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
    <span class="nt">&lt;script&gt;</span>
        <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="na">el</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">data</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                <span class="k">return</span> <span class="p">{</span>
                    <span class="na">file_dir</span><span class="p">:</span> <span class="nx">GC_JAVA_DOC_FILE_DIR</span><span class="p">,</span>
                    <span class="na">activityIndex</span><span class="p">:</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="na">computed</span><span class="p">:</span> <span class="p">{</span>
                <span class="na">activity_appid_branch_info</span><span class="p">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activityIndex</span><span class="p">)</span>
                    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">file_dir</span><span class="p">[</span><span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activityIndex</span><span class="p">)][</span><span class="dl">'</span><span class="s1">branch</span><span class="dl">'</span><span class="p">]</span>
                <span class="p">},</span>
                <span class="na">activity_appid_info</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activityIndex</span><span class="p">)</span>
                    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">file_dir</span><span class="p">[</span><span class="nb">parseInt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">activityIndex</span><span class="p">)][</span><span class="dl">'</span><span class="s1">appid</span><span class="dl">'</span><span class="p">]</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
                <span class="nx">handleSelect</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">keyPath</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">activityIndex</span> <span class="o">=</span> <span class="nx">key</span><span class="o">+</span><span class="dl">''</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="nt">&lt;/script&gt;</span>
    <span class="nt">&lt;style </span><span class="na">scop</span><span class="nt">&gt;</span>
        <span class="nf">#app</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nc">.spilt-line</span> <span class="p">{</span>
            <span class="nl">height</span><span class="p">:</span> <span class="m">1px</span><span class="p">;</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
            <span class="nl">background-color</span><span class="p">:</span> <span class="m">#e6e6e6</span><span class="p">;</span>
            <span class="nl">margin</span><span class="p">:</span> <span class="m">0px</span> <span class="m">0px</span> <span class="m">30px</span> <span class="m">0px</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nc">.doc-header</span> <span class="p">{</span>
            <span class="nl">margin</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
            <span class="nl">position</span><span class="p">:</span> <span class="nb">relative</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nc">.header-title</span> <span class="p">{</span>
            <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
            <span class="nl">font-size</span><span class="p">:</span> <span class="m">30px</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nc">.header-desc</span> <span class="p">{</span>
            <span class="nl">font-size</span><span class="p">:</span> <span class="m">15px</span><span class="p">;</span>
            <span class="nl">position</span><span class="p">:</span> <span class="nb">absolute</span><span class="p">;</span>
            <span class="nl">bottom</span><span class="p">:</span> <span class="m">0px</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nc">.appid_branch</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
            <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nc">.branc_name</span> <span class="p">{</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
            <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nt">el-table-column</span> <span class="p">{</span>
            <span class="nl">font-size</span><span class="p">:</span> <span class="m">100px</span><span class="p">;</span>
            <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span>
            <span class="nl">text-align</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<p>美化之后的样子是：</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc15.jpg" alt="gitlab" />
<img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc16.jpg" alt="gitlab" /></p>

<h2 id="heading-这就完事了么">这就完事了么？</h2>

<p>我们已经实现了一个自动生成javadoc的流程，这样，上面所有的问题包括实时性已经完美的解决了，这种方式即提高了写文档的效率，又方便传输和观看，所以，针对于自动生成文档这个主题，已经介绍完了，但借助gitlab-runner or jenkins，我们可以做很多事情，而这些事情比文档自动化更有价值，比如发布系统，比如整个系统的自动化测试，等还有好多看起来更复杂的东西。</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc19.jpg" alt="gitlab" /></p>

<p>上面这张图是 敏捷开发，持续集成，持续部署，Devops 各自所涵盖的点，而针对上面这个简单的文档自动化生成原理来说，其实我们使用其原理，可以完成整个devops的技术核心搭建。</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc20.jpg" alt="gitlab" /></p>

<p>这张图，我简单的画了下，cicd整套开发模式，流程大致是：</p>

<ul>
  <li>rd根据prd开发需求并完成自测</li>
  <li>rd将代码提mr到release分支</li>
  <li>mr会自动触发ci流程，分别进行 自动化测试，和 镜像打包</li>
  <li>mr会将打包的镜像提测给qa</li>
  <li>qa将mr提测的镜像部署到测试服务器并进行测试</li>
  <li>qa测试通过，将mr merge到release分支</li>
  <li>gitlab自动触发cd流程，将代码部署到线上</li>
</ul>

<p>这样，整套持续集成，持续部署便完成了，但这套流程里面毕竟自动化程度过高，特别是部署的流程风险太大不应该被自动化，所以一套更灵活的解决方案如下：</p>

<p><img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc21.jpg" alt="gitlab" />
<img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc22.jpg" alt="gitlab" />
<img src="https://int32-blog.oss-cn-beijing.aliyuncs.com/cicddoc23.jpg" alt="gitlab" /></p>

<blockquote>
  <p>整个在研发过程中，其实是感知不到运维的存在，这也就是devops的真谛</p>
</blockquote>

:ET